import { app, BrowserWindow } from "electron";
import "reflect-metadata";
import { container } from "tsyringe";
import { updateElectronApp } from "update-electron-app";
import { Di } from "./services/di";
import { IIpcDispatcherService } from "./services/ipc/ipc-dispatcher.service";
import TOKENS from "./services/tokens";
import { IDatabaseService } from "./services/database/database.service";
import { MigrationProvider } from "kysely";

// TODO splash screen and communicate with renderer (is that possible)

// This allows TypeScript to pick up the magic constants that"s auto-generated by Forge"s Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you"re running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;


// check for updates
updateElectronApp();

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

Di.register();

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    // TODO icon: "/resources/icons/collection_manager_512",
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // TO DO: only in dev: Open the DevTools.
  // mainWindow.webContents.openDevTools();


};


// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.whenReady().then(() => {
  container.resolve<IIpcDispatcherService>(TOKENS.IpcDispatcherService).Initialize();
  container.resolve<IDatabaseService>(TOKENS.DatabaseService)
    .connect("c:/data/new-assistant")
    .migrateToLatest(container.resolve<MigrationProvider>(TOKENS.CustomMigrationProvider));

  createWindow();

  app.on("activate", () => {
    if (BrowserWindow.getAllWindows().length === 0) {
      createWindow();
    }
  });
});

// Quit when all windows are closed, except on macOS. There, it"s common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it"s common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app"s specific main process
// code. You can also put them in separate files and import them here.
