import {
  ColumnType,
  Generated,
  Insertable,
  JSONColumnType,
  Kysely,
  Selectable,
  SqliteDatabase,
  SqliteDialect,
  Updateable
} from 'kysely'

export interface Database {
  person: PersonTable

}

// This interface describes the `person` table to Kysely. Table
// interfaces should only be used in the `Database` type above
// and never as a result type of a query!. See the `Person`,
// `NewPerson` and `PersonUpdate` types below.
export interface PersonTable {
  // Columns that are generated by the database should be marked
  // using the `Generated` type. This way they are automatically
  // made optional in inserts and updates.
  id: Generated<number>

  first_name: string
  gender: 'man' | 'woman' | 'other'

  // If the column is nullable in the database, make its type nullable.
  // Don't use optional properties. Optionality is always determined
  // automatically by Kysely.
  last_name: string | null

  // You can specify a different type for each operation (select, insert and
  // update) using the `ColumnType<SelectType, InsertType, UpdateType>`
  // wrapper. Here we define a column `created_at` that is selected as
  // a `Date`, can optionally be provided as a `string` in inserts and
  // can never be updated:
  created_at: ColumnType<Date, string | undefined, never>

  // You can specify JSON columns using the `JSONColumnType` wrapper.
  // It is a shorthand for `ColumnType<T, string, string>`, where T
  // is the type of the JSON object/array retrieved from the database,
  // and the insert and update types are always `string` since you're
  // always stringifying insert/update values.
  metadata: JSONColumnType<{
    login_at: string;
    ip: string | null;
    agent: string | null;
    plan: 'free' | 'premium';
  }>
}

export class Test{

  public constructor(sqlitedb: SqliteDatabase) {
    const dialect = new SqliteDialect({ database: sqlitedb });


    // Database interface is passed to Kysely's constructor, and from now on, Kysely
    // knows your database structure.
    // Dialect is passed to Kysely's constructor, and from now on, Kysely knows how
    // to communicate with your database.
    const db = new Kysely<Database>({
      dialect,
    })
    let query = db.selectFrom('person')


    db.executeQuery<PersonTable>(query).then((value) => {
      console.log(value.rows[0].created_at.__select__)
    })
  }
}
