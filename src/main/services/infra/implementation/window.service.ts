import { BrowserWindow, app, dialog } from "electron";
import { injectable } from "tsyringe";
import { IConfigurationService, IWindowService } from "../interfaces";
import { DtoSyncParam } from "../../../../common/dto";

// This allows TypeScript to pick up the magic constants that"s auto-generated by Forge"s Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you"re running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
declare const FIRST_TIME_WEBPACK_ENTRY: string;
declare const FIRST_TIME_PRELOAD_WEBPACK_ENTRY: string;
declare const SPLASH_WINDOW_WEBPACK_ENTRY: string;
declare const SPLASH_WINDOW_PRELOAD_WEBPACK_ENTRY: string;


@injectable()
export class WindowService implements IWindowService {

  //#region private fields ----------------------------------------------------
  private _mainWindow: BrowserWindow;
  //#endregion

  //#region getters -----------------------------------------------------------
  public get mainWindow(): BrowserWindow {
    return this._mainWindow;
  }
  //#endregion


  //#region IWindowsService methods -------------------------------------------
  public async boot(
    bootFunction: (splashWindow: BrowserWindow, syncParam: DtoSyncParam) => Promise<void>,
    configurationService: IConfigurationService): Promise<void> {

    const splashWindow = this.createSplashWindow();

    const syncParam = configurationService.isFirstUsage ?
      this.firstUseSyncParam() :
      configurationService.syncAtStartup;

    splashWindow.on("show", async () => {
      await bootFunction(splashWindow, syncParam)
        .then(
          () => {
            this.createMainWindow();
            this._mainWindow.on("ready-to-show", () => {
              this._mainWindow.show();
              if (!splashWindow.isDestroyed()) {
                splashWindow.close();
              }
            });
          }
        )
        .catch((reason: Error) => {
          splashWindow.hide();
          dialog.showErrorBox(`Error:" ${reason.message}`, reason.stack);
          app.exit();
        });
    });

    splashWindow.on("ready-to-show", () => {
      if (configurationService.isFirstUsage) {
        const firsTimeWindow = this.createFirstTimeWindow();
        firsTimeWindow.on("closed", () => {
          if (configurationService.isFirstUsage) {
            app.quit();
          } else {
            splashWindow.show();
          }
        });
      } else {
        splashWindow.show();
      }
    });
  }

  public createMainWindow(): BrowserWindow {
    this._mainWindow = new BrowserWindow({
      height: 600,
      width: 800,
      // TODO icon: "/resources/icons/collection_manager_512",
      webPreferences: {
        preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      },
      show: false
    });
    this._mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
    if (!app.isPackaged) {
      this._mainWindow.webContents.openDevTools({ mode: "undocked" });
    }
    return this._mainWindow;
  }
  //#endregion

  //#region Auxiliary methods -------------------------------------------------
  private createSplashWindow(): BrowserWindow {
    const splashWindow = new BrowserWindow({
      height: 506,
      width: 900,
      webPreferences: {
        preload: SPLASH_WINDOW_PRELOAD_WEBPACK_ENTRY,
      },
      show: false,
      alwaysOnTop: true,
      frame: false,
    });
    splashWindow.loadURL(SPLASH_WINDOW_WEBPACK_ENTRY);
    return splashWindow;
  }

  private createFirstTimeWindow(): BrowserWindow {
    const createFirstTimeWindow = new BrowserWindow({
      height: 320,
      width: 800,
      webPreferences: {
        preload: FIRST_TIME_PRELOAD_WEBPACK_ENTRY,
      },
      show: true,
      alwaysOnTop: true,
      frame: true
    });
    createFirstTimeWindow.loadURL(FIRST_TIME_WEBPACK_ENTRY);
    return createFirstTimeWindow;
  }

  private firstUseSyncParam(): DtoSyncParam {
    const result: DtoSyncParam = {
      catalogTypesToSync: ["AbilityWords", "LandTypes", "ArtifactTypes"],  // add more catalogs when we need them to search
      syncCardSymbols: true,
      syncCardSets: true,
      rulingSyncType: "none",
      cardSyncType: "none",
      cardSelectionToSync: [],
      cardImageStatusToSync: [],
      syncCardsSyncedBeforeNumber: 0,
      syncCardsSyncedBeforeUnit: undefined,
      cardSetCodeToSyncCardsFor: undefined,
      changedImageStatusAction: undefined
    };
    return result;
  }
  //#endregion


}
