import { BrowserWindow, app } from "electron";
import { inject, singleton } from "tsyringe";
import { ILogService, IWindowsService } from "../interfaces";
import { INFRASTRUCTURE } from "../../service.tokens";

/*
 * This allows TypeScript to pick up the magic constants that"s auto-generated by Forge"s Webpack
 * plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
 * whether you"re running in development or production).
 */
declare const FIRST_TIME_WEBPACK_ENTRY: string;
declare const FIRST_TIME_PRELOAD_WEBPACK_ENTRY: string;
declare const DECK_WINDOW_WEBPACK_ENTRY: string;
declare const DECK_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
declare const SPLASH_WINDOW_WEBPACK_ENTRY: string;
declare const SPLASH_WINDOW_PRELOAD_WEBPACK_ENTRY: string;


@singleton()
export class WindowsService implements IWindowsService {
  //#region private fields ----------------------------------------------------
  private readonly logService: ILogService;
  private deckWindows: Map<number, BrowserWindow>;
  private _mainWindow: BrowserWindow;
  //#endregion

  //#region IWindowsService properties ----------------------------------------
  public get mainWindow(): BrowserWindow {
    return this._mainWindow;
  }
  //#endregion

  //#region Constructor -------------------------------------------------------
  public constructor(@inject(INFRASTRUCTURE.LogService) logService: ILogService) {
    this.logService = logService;
    this.deckWindows = new Map<number, BrowserWindow>();
  }
  //#endregion

  //#region IWindowsService methods -------------------------------------------
  public createFirstTimeWindow(): BrowserWindow {
    const createFirstTimeWindow = new BrowserWindow({
      height: 320,
      width: 800,
      webPreferences: {
        preload: FIRST_TIME_PRELOAD_WEBPACK_ENTRY
      },
      icon: "assets/icons/logo.ico",
      show: true,
      alwaysOnTop: true,
      frame: true
    });
    void createFirstTimeWindow.loadURL(FIRST_TIME_WEBPACK_ENTRY);
    return createFirstTimeWindow;
  }

  public createMainWindow(): BrowserWindow {
    this._mainWindow = new BrowserWindow({
      height: 600,
      width: 800,
      icon: "assets/icons/logo.ico",
      webPreferences: {
        preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY
      },
      show: false
    });

    void this._mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
    if (!app.isPackaged) {
      this._mainWindow.webContents.openDevTools({ mode: "undocked" });
    }

    return this._mainWindow;
  }

  public createSplashWindow(): BrowserWindow {
    const splashWindow = new BrowserWindow({
      height: 506,
      width: 900,
      webPreferences: {
        preload: SPLASH_WINDOW_PRELOAD_WEBPACK_ENTRY
      },
      show: false,
      alwaysOnTop: true,
      frame: false
    });
    void splashWindow.loadURL(SPLASH_WINDOW_WEBPACK_ENTRY);
    return splashWindow;
  }

  public getDeckWindow(deckId: number): void {
    let templateEditorWindow = this.deckWindows.get(deckId);
    if (templateEditorWindow == undefined) {
      this.logService.debug("Main", "Creating new window");
      templateEditorWindow = new BrowserWindow({
        height: 800,
        width: 1200,
        webPreferences: {
          preload: DECK_WINDOW_PRELOAD_WEBPACK_ENTRY
        },
        show: false,
        alwaysOnTop: false,
        frame: true
      });
      templateEditorWindow.on("closed", () => {
        const closingWindow = [...this.deckWindows].find((value: [number, BrowserWindow]) => value[1] === templateEditorWindow);
        if (closingWindow != undefined) {
          this.logService.debug("Main", "removing editor window from map");
          this.deckWindows.delete(closingWindow[0]);
        } else {
          this.logService.debug("Main", "window not found");
        }
      });

      this.deckWindows.set(deckId, templateEditorWindow);
      void templateEditorWindow.loadURL(`${DECK_WINDOW_WEBPACK_ENTRY}?id=${deckId}`);
      templateEditorWindow.on("ready-to-show", () => templateEditorWindow.show());
    } else {
      this.logService.debug("Main", "Focus existing window");
      templateEditorWindow.focus();
    }
  }
  //#endregion
}
